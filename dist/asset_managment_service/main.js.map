{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///external commonjs \"@nestjs/core\"","webpack:///external commonjs \"@nestjs/microservices\"","webpack:///./src/investment/investment.module.ts","webpack:///external commonjs \"tslib\"","webpack:///external commonjs \"@nestjs/common\"","webpack:///./src/investment/investment.controller.ts","webpack:///external commonjs \"@nestjs/cqrs\"","webpack:///./src/investment/dto/request/createInvestmentRequest.dto.ts","webpack:///./src/investment/commands/createInvestment.command.ts","webpack:///./src/investment/commands/failedTransactionCreation.command.ts","webpack:///./src/investment/dto/request/failedTransactionCreation.dto.ts","webpack:///./src/investment/dto/request/successTransactionCreation.dto.ts","webpack:///external commonjs \"@nestjs/mongoose\"","webpack:///./src/investment/db/investment.schema.ts","webpack:///../../libs/database/src/index.ts","webpack:///../../libs/database/src/lib/database.module.ts","webpack:///external commonjs \"@nestjs/config\"","webpack:///../../libs/database/src/lib/entity.repository.ts","webpack:///../../libs/database/src/lib/identifiable-entity.schema.ts","webpack:///external commonjs \"mongoose\"","webpack:///../../libs/database/src/lib/base-entity.repository.ts","webpack:///external commonjs \"mongodb\"","webpack:///../../libs/rmq/src/index.ts","webpack:///../../libs/rmq/src/lib/rmq.module.ts","webpack:///../../libs/rmq/src/lib/rmq.service.ts","webpack:///./src/investment/db/investment-schema.factory.ts","webpack:///./src/investment/domain/Investment.model.ts","webpack:///./src/investment/db/investment-entity.repository.ts","webpack:///./src/investment/commands/index.ts","webpack:///./src/investment/commands/createInvestment.handler.ts","webpack:///./src/investment/domain/Investment.factory.ts","webpack:///./src/investment/events/investmentCreated.event.ts","webpack:///./src/investment/events/index.ts","webpack:///./src/investment/events/failedTransactionsInvestmentDeleted.handler.ts","webpack:///./src/investment/events/failedTransactionsInvestmentDeleted.event.ts","webpack:///./src/investment/transaction.consts.ts","webpack:///./src/investment/events/investmentCreated.handler.ts","webpack:///external commonjs \"joi\"","webpack:///./src/filters/exception.filter.ts","webpack:///./src/investment/commands/failedTransactionCreation.handler.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/microservices\");","import { Module } from '@nestjs/common';\nimport { InvestmentController } from './investment.controller';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Investment, InvestmentSchema } from './db/investment.schema';\nimport { DatabaseModule } from '@app/libs/database';\nimport { RmqModule } from '@app/libs/rmq';\nimport { InvestmentSchemaFactory } from './db/investment-schema.factory';\nimport { InvestmentEntityRepository } from './db/investment-entity.repository';\nimport { InvestmentCommandHandlers } from './commands';\nimport { InvestmentFactory } from './domain/Investment.factory';\nimport { InvestmentEventHandlers } from './events';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { RMQ_INVESTMENT_SERVICE_NAME, RMQ_TRANSACTION_SERVICE_NAME } from './transaction.consts';\nimport { ConfigModule } from '@nestjs/config';\nimport Joi from 'joi';\n\n\n@Module({\n  imports:[\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: './apps/asset_managment_service/.env',\n      validationSchema: Joi.object({\n        RABBIT_MQ_URI: Joi.string().required(),\n        RABBIT_MQ_INVESTMENT_QUEUE: Joi.string().required(),\n      }),\n    }),\n    CqrsModule,\n    MongooseModule.forFeature([{ name: Investment.name, schema: InvestmentSchema }]),\n    DatabaseModule, \n    RmqModule.register({\n      name:RMQ_INVESTMENT_SERVICE_NAME\n    }),\n    RmqModule.register({\n      name:RMQ_TRANSACTION_SERVICE_NAME\n    }),   \n  ],\n  providers:[\n    InvestmentEntityRepository,\n    InvestmentSchemaFactory,\n    InvestmentFactory,\n    ...InvestmentCommandHandlers,\n    ...InvestmentEventHandlers\n  ],\n  controllers: [InvestmentController]\n})\nexport class InvestmentModule {}\n","module.exports = require(\"tslib\");","module.exports = require(\"@nestjs/common\");","import { Controller, Logger } from '@nestjs/common';\nimport { CommandBus } from '@nestjs/cqrs';\nimport { MessagePattern, Payload, Ctx, RmqContext } from '@nestjs/microservices';\nimport { CreateInvestmentRequest } from './dto/request/createInvestmentRequest.dto';\nimport { CreateInvestmentCommand } from './commands/createInvestment.command';\nimport { FailedTransactionCreationCommand } from './commands/failedTransactionCreation.command';\nimport { FailedTransactionCreationDto } from './dto/request/failedTransactionCreation.dto';\nimport { SuccessTransactionCreationDto } from './dto/request/successTransactionCreation.dto';\n\n@Controller()\nexport class InvestmentController {\n\n    private readonly logger = new Logger(InvestmentController.name);\n\n    constructor(private readonly commandBus: CommandBus){}\n\n    @MessagePattern(\"investment.creation\")\n    async createInvestment(@Payload() data: CreateInvestmentRequest, @Ctx() context: RmqContext) {\n        this.logger.debug(`Message (investment.creation): ${JSON.stringify(data)}`);\n        await this.commandBus.execute<CreateInvestmentCommand,void>(new CreateInvestmentCommand(data))\n    }\n\n    @MessagePattern(\"fail.investment.creation\")\n    async failInvestment(@Payload() data: any, @Ctx() context: RmqContext) {\n        this.logger.error(`Message(fail.investment.creation): ${JSON.stringify(data)}`);\n    }\n\n    @MessagePattern(\"fail.transaction.creation\")\n    async processFailedTransactionCreation(@Payload() data: FailedTransactionCreationDto, @Ctx() context: RmqContext) {\n        this.logger.debug(`Message (fail.transaction.creation): ${JSON.stringify(data)}`);\n        await this.commandBus.execute<FailedTransactionCreationCommand,void>(new FailedTransactionCreationCommand(data));\n    }\n\n    @MessagePattern(\"success.transaction.creation\")\n    async processSuccessTransactionCreation(@Payload() data: SuccessTransactionCreationDto, @Ctx() context: RmqContext) {\n        this.logger.debug(`Message (success.transaction.creation): ${JSON.stringify(data,null,2)}`);\n    }\n}\n\n\n/*\nMessage example:\n{  \n    \"pattern\": \"investment.creation\",\n    \"data\":\n     {\n        \"name\": \"Heyo!\",\n        \"description\": \"Bla bla bla\",\n        \"startDate\":\"2023-05-12\",\n        \"endDate\":\"2023-05-18\",\n        \"initialAmount\":123,\n        \"currentValue\":123,\n        \"amount\":\"123\",\n        \"units\":\"oil\"\n     }\n}\n*/","module.exports = require(\"@nestjs/cqrs\");","export class CreateInvestmentRequest{\r\n    name: string;\r\n    description: string;\r\n    startDate:string;\r\n    endDate:string;\r\n    initialAmount:number;\r\n    currentValue:number;\r\n    amount:number;\r\n    units:string;\r\n}","import { CreateInvestmentRequest } from \"../dto/request/createInvestmentRequest.dto\";\r\n\r\nexport class CreateInvestmentCommand {\r\n    constructor(\r\n      public readonly createInvestmentRequest: CreateInvestmentRequest,\r\n    ) {}\r\n  }","import { FailedTransactionCreationDto } from \"../dto/request/failedTransactionCreation.dto\";\r\n\r\nexport class FailedTransactionCreationCommand {\r\n    constructor(\r\n      public readonly data: FailedTransactionCreationDto,\r\n\r\n    ) {}\r\n  }","export class FailedTransactionCreationDto{\r\n    exception: unknown;\r\n    investmentId: string;\r\n}","export class SuccessTransactionCreationDto{\r\n    investmentId:string;\r\n    transactionDate:string;\r\n    amount:number;\r\n    units:string;\r\n}\r\n","module.exports = require(\"@nestjs/mongoose\");","import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\r\nimport { IdentifiableEntitySchema } from \"@app/libs/database\";\r\n\r\n@Schema({versionKey: false, collection: 'investments'})\r\nexport class Investment extends IdentifiableEntitySchema{\r\n\r\n    @Prop()\r\n    name: string\r\n\r\n    @Prop()\r\n    description: string\r\n\r\n    @Prop()\r\n    startDate:Date\r\n\r\n    @Prop()\r\n    endDate:Date\r\n\r\n    @Prop()\r\n    initialAmount:number\r\n\r\n    @Prop()\r\n    currentValue:number\r\n}\r\n\r\nexport const InvestmentSchema = SchemaFactory.createForClass(Investment);","export {DatabaseModule} from './lib/database.module';\nexport {EntityRepository} from './lib/entity.repository';\nexport {EntityFactory} from './lib/entity.factory';\nexport {IdentifiableEntitySchema} from './lib/identifiable-entity.schema';\nexport {EntitySchemaFactory} from './lib/entity-schema.factory';\nexport {BaseEntityRepository} from './lib/base-entity.repository';\n","import { Module } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forRootAsync({\r\n      useFactory: (configService: ConfigService) => ({\r\n        uri: configService.get<string>('MONGODB_URI'),\r\n        dbName: configService.get<string>('MONGODB_DATABASE_NAME')\r\n      }),\r\n      inject: [ConfigService],\r\n    }),\r\n  ],\r\n})\r\nexport class DatabaseModule {}","module.exports = require(\"@nestjs/config\");","import { NotFoundException } from '@nestjs/common';\r\nimport { AggregateRoot } from '@nestjs/cqrs';\r\nimport {\r\n  FilterQuery,\r\n  Model\r\n} from 'mongoose';\r\n\r\nimport { EntitySchemaFactory } from './entity-schema.factory';\r\nimport { IdentifiableEntitySchema } from './identifiable-entity.schema';\r\n\r\nexport abstract class EntityRepository<\r\n  TSchema extends IdentifiableEntitySchema,\r\n  TEntity extends AggregateRoot\r\n> {\r\n  constructor(\r\n    protected readonly entityModel: Model<TSchema>,\r\n    protected readonly entitySchemaFactory: EntitySchemaFactory<\r\n      TSchema,\r\n      TEntity\r\n    >,\r\n  ) {}\r\n\r\n  protected async findOne(\r\n    entityFilterQuery?: FilterQuery<TSchema>,\r\n  ): Promise<TEntity> {\r\n    const entityDocument = await this.entityModel.findOne(\r\n      entityFilterQuery,\r\n      {},\r\n    );\r\n\r\n    if (!entityDocument) {\r\n      throw new NotFoundException('Entity was not found.');\r\n    }\r\n\r\n    return this.entitySchemaFactory.createFromSchema(entityDocument.toObject());\r\n  }\r\n\r\n  protected async find(\r\n    entityFilterQuery: FilterQuery<TSchema>,\r\n  ): Promise<TEntity[]> {\r\n    return (\r\n      await this.entityModel.find(entityFilterQuery, {})\r\n    ).map(entityDocument =>\r\n      this.entitySchemaFactory.createFromSchema(entityDocument.toObject()),\r\n    );\r\n  }\r\n\r\n  async create(entity: TEntity): Promise<void> {\r\n    await new this.entityModel(this.entitySchemaFactory.create(entity)).save();\r\n  }\r\n\r\n  async remove(entityId: string): Promise<void> {\r\n    await this.entityModel.deleteOne({where:{_id:entityId}});\r\n  }\r\n\r\n\r\n  protected async findOneAndReplace(\r\n    entityFilterQuery: FilterQuery<TSchema>,\r\n    entity: TEntity,\r\n  ): Promise<void> {\r\n    const updatedEntityDocument = await this.entityModel.findOneAndReplace(\r\n      entityFilterQuery,\r\n      (this.entitySchemaFactory.create(\r\n        entity,\r\n      ) ),\r\n      {\r\n        new: true,\r\n        useFindAndModify: false,\r\n        lean: true,\r\n      },\r\n    );\r\n\r\n    if (!updatedEntityDocument) {\r\n      throw new NotFoundException('Unable to find the entity to replace.');\r\n    }\r\n  }\r\n}","import { Prop, Schema } from '@nestjs/mongoose';\r\nimport { SchemaTypes, Types } from 'mongoose';\r\n\r\n@Schema()\r\nexport abstract class IdentifiableEntitySchema {\r\n  @Prop({ type: SchemaTypes.ObjectId })\r\n  readonly _id!: Types.ObjectId;\r\n}","module.exports = require(\"mongoose\");","import { AggregateRoot } from '@nestjs/cqrs';\r\nimport { ObjectId } from 'mongodb';\r\nimport { FilterQuery } from 'mongoose';\r\nimport { EntityRepository } from './entity.repository';\r\n\r\nimport { IdentifiableEntitySchema } from './identifiable-entity.schema';\r\n\r\nexport abstract class BaseEntityRepository<\r\n  TSchema extends IdentifiableEntitySchema,\r\n  TEntity extends AggregateRoot\r\n> extends EntityRepository<TSchema, TEntity> {\r\n  async findOneById(id: string): Promise<TEntity> {\r\n    return this.findOne({ _id: new ObjectId(id) } as FilterQuery<TSchema>);\r\n  }\r\n\r\n  async findOneAndReplaceById(id: string, entity: TEntity): Promise<void> {\r\n    await this.findOneAndReplace(\r\n      { _id: new ObjectId(id) } as FilterQuery<TSchema>,\r\n      entity,\r\n    );\r\n  }\r\n\r\n  async findAll(): Promise<TEntity[]> {\r\n    return this.find({});\r\n  }\r\n}","module.exports = require(\"mongodb\");","export {RmqModule} from './lib/rmq.module';\nexport {RmqService} from './lib/rmq.service';\n","import { DynamicModule, Module } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { ClientsModule, Transport } from '@nestjs/microservices';\r\nimport { RmqService } from './rmq.service';\r\n\r\ninterface RmqModuleOptions {\r\n  name: string;\r\n}\r\n\r\n@Module({\r\n  providers: [RmqService],\r\n  exports: [RmqService],\r\n})\r\nexport class RmqModule {\r\n  static register({ name }: RmqModuleOptions): DynamicModule {\r\n    return {\r\n      module: RmqModule,\r\n      imports: [\r\n        ClientsModule.registerAsync({\r\n          clients:[\r\n            {\r\n              name,\r\n              useFactory: (configService: ConfigService) => {\r\n                \r\n                const url = configService.get<string>('RABBIT_MQ_URI') || '';\r\n                const queue = configService.get<string>(`RABBIT_MQ_${name}_QUEUE`);\r\n                console.log('RabbitMQ module initiated');\r\n                console.log(url);\r\n                console.log(`${`RABBIT_MQ_${name}_QUEUE`}:${queue}`);\r\n\r\n                return{\r\n                  transport: Transport.RMQ,\r\n                  options: {\r\n                    urls: [url],\r\n                    queue\r\n                  },\r\n                }\r\n              },\r\n              inject: [ConfigService],\r\n            },\r\n          ],\r\n        }),\r\n      ],\r\n      exports: [ClientsModule],\r\n    };\r\n  }\r\n}","import { Injectable } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { RmqContext, RmqOptions, Transport } from '@nestjs/microservices';\r\n\r\n@Injectable()\r\nexport class RmqService {\r\n  constructor(private readonly configService: ConfigService) {}\r\n\r\n  getOptions(queue: string, noAck = false): RmqOptions {\r\n    return {\r\n      transport: Transport.RMQ,\r\n      options: {\r\n        urls: [this.configService.getOrThrow<string>('RABBIT_MQ_URI')],\r\n        queue: this.configService.get<string>(`RABBIT_MQ_${queue}_QUEUE`),\r\n        noAck,\r\n        persistent: true,\r\n      },\r\n    };\r\n  }\r\n\r\n  ack(context: RmqContext) {\r\n    const channel = context.getChannelRef();\r\n    const originalMessage = context.getMessage();\r\n    channel.ack(originalMessage);\r\n  }\r\n}","import { EntitySchemaFactory } from \"@app/libs/database\";\r\n\r\nimport { Injectable } from \"@nestjs/common\";\r\nimport { ObjectId } from \"mongodb\";\r\nimport { Investment } from \"./investment.schema\";\r\nimport { InvestmentDomainModel } from \"../domain/Investment.model\";\r\n\r\n@Injectable()\r\nexport class InvestmentSchemaFactory implements EntitySchemaFactory<Investment,InvestmentDomainModel>{\r\n\r\n    create(entity: InvestmentDomainModel): Investment{\r\n        return{\r\n            _id: new ObjectId(entity.getId()),\r\n            name: entity.getName(),\r\n            description:entity.getDescription(),\r\n            startDate: entity.getStartDate(),\r\n            endDate: entity.getEndDate(),\r\n            initialAmount: entity.getInitialAmount(),\r\n            currentValue:entity.getCurrentValue()\r\n        }\r\n    }\r\n\r\n    createFromSchema(entitySchema: Investment): InvestmentDomainModel {\r\n        return new InvestmentDomainModel(\r\n            entitySchema._id.toHexString(),\r\n            entitySchema.name,\r\n            entitySchema.description,\r\n            entitySchema.startDate,\r\n            entitySchema.endDate,\r\n            entitySchema.initialAmount,\r\n            entitySchema.currentValue\r\n        )\r\n    }\r\n}","import { AggregateRoot } from \"@nestjs/cqrs\";\r\n\r\nexport class InvestmentDomainModel extends AggregateRoot{\r\n\r\n\r\n    constructor(\r\n        private readonly _id:string,\r\n        private readonly name:string,\r\n        private readonly description:string,\r\n        private readonly startDate:Date,\r\n        private readonly endDate:Date,\r\n        private readonly initialAmount:number,\r\n        private readonly currentValue:number,\r\n    ){\r\n        super()\r\n    }\r\n\r\n    getId(){\r\n        return this._id;\r\n    }\r\n\r\n    getName(){\r\n        return this.name;\r\n    }\r\n\r\n    getDescription(){\r\n        return this.description;\r\n    }\r\n\r\n    getStartDate(){\r\n        return this.startDate;\r\n    }\r\n\r\n    getEndDate(){\r\n        return this.endDate;\r\n    }\r\n\r\n    getInitialAmount(){\r\n        return this.initialAmount;\r\n    }\r\n\r\n    getCurrentValue(){\r\n        return this.currentValue;\r\n    }\r\n    \r\n    \r\n\r\n}","import { Injectable } from \"@nestjs/common\";\r\n\r\nimport { InjectModel } from \"@nestjs/mongoose\";\r\nimport { Model } from \"mongoose\";\r\nimport { InvestmentDomainModel } from \"../domain/Investment.model\";\r\nimport { InvestmentSchemaFactory } from \"./investment-schema.factory\";\r\nimport { Investment } from \"./investment.schema\";\r\nimport { BaseEntityRepository } from \"@app/libs/database\";\r\n\r\n\r\n@Injectable()\r\nexport class InvestmentEntityRepository extends BaseEntityRepository<Investment,InvestmentDomainModel>{\r\n\r\n    constructor(\r\n        @InjectModel(Investment.name)\r\n        investmentModel:Model<Investment>,\r\n        investmentSchemaFactory:InvestmentSchemaFactory\r\n    ){\r\n        super(investmentModel,investmentSchemaFactory)\r\n    }\r\n}","import { CreateInvestmentHandler } from \"./createInvestment.handler\";\r\nimport { FailedTransactionCreationHandler } from \"./failedTransactionCreation.handler\";\r\n\r\nexport const InvestmentCommandHandlers = [CreateInvestmentHandler,FailedTransactionCreationHandler]","import { CommandHandler, EventPublisher, ICommandHandler } from \"@nestjs/cqrs\";\r\nimport { CreateInvestmentCommand } from \"./createInvestment.command\";\r\nimport { InvestmentFactory } from \"../domain/Investment.factory\";\r\nimport { InvestmentCreatedEvent } from \"../events/investmentCreated.event\";\r\n\r\n@CommandHandler(CreateInvestmentCommand)\r\nexport class CreateInvestmentHandler implements ICommandHandler<CreateInvestmentCommand> {\r\n  constructor(\r\n    private readonly investmentFactory: InvestmentFactory,\r\n    private readonly eventPublisher: EventPublisher\r\n    ) {}\r\n\r\n  async execute({createInvestmentRequest}: CreateInvestmentCommand) {\r\n    const { name,description,startDate,endDate,initialAmount,currentValue,units,amount } = createInvestmentRequest;\r\n    const investment = this.eventPublisher.mergeObjectContext(await this.investmentFactory.create(\r\n        name,\r\n        description,\r\n        startDate,\r\n        endDate,\r\n        initialAmount,\r\n        currentValue\r\n      )\r\n    );\r\n    investment.apply(\r\n      new InvestmentCreatedEvent({\r\n        investmentId: investment.getId(),\r\n        amount,\r\n        units,\r\n        transactionDate:startDate\r\n      })\r\n  );\r\n    investment.commit();    \r\n  }\r\n}","import { Injectable } from \"@nestjs/common\";\r\nimport {ObjectId} from 'mongodb'\r\nimport { InvestmentDomainModel } from \"./Investment.model\";\r\nimport { InvestmentEntityRepository } from \"../db/investment-entity.repository\";\r\nimport { InvestmentCreatedEvent } from \"../events/investmentCreated.event\";\r\nimport { EntityFactory } from \"@app/libs/database\";\r\n\r\n\r\n@Injectable()\r\nexport class InvestmentFactory implements EntityFactory<InvestmentDomainModel>{\r\n\r\n    constructor(private repository: InvestmentEntityRepository){}\r\n\r\n    async create(  \r\n        name:string,\r\n        description:string,\r\n        startDate:string,\r\n        endDate:string,\r\n        initialAmount:number,\r\n        currentValue:number): Promise<InvestmentDomainModel> {\r\n\r\n        const investment = new InvestmentDomainModel(\r\n            new ObjectId().toHexString(),\r\n            name,\r\n            description,\r\n            new Date(startDate),\r\n            new Date(endDate),\r\n            initialAmount,\r\n            currentValue,\r\n        );\r\n        await this.repository.create(investment);\r\n        return investment;\r\n    }\r\n\r\n    async remove(investmentId:string): Promise<void> {\r\n        await this.repository.remove(investmentId);\r\n    }\r\n}","import { InvestmentDomainModel } from \"../domain/Investment.model\";\r\nimport { BuyAsssetResponse } from \"../dto/response/buyAssetResponse.dto\";\r\n\r\nexport class InvestmentCreatedEvent{\r\n    constructor(public readonly dto:BuyAsssetResponse){}\r\n}","import { FailedTransactionsInvestmentDeletedHandler } from \"./failedTransactionsInvestmentDeleted.handler\";\r\nimport { InvestmentCreatedHandler } from \"./investmentCreated.handler\";\r\n\r\n\r\nexport const InvestmentEventHandlers = [InvestmentCreatedHandler,FailedTransactionsInvestmentDeletedHandler]","import { EventsHandler, IEventHandler } from \"@nestjs/cqrs\";\r\nimport { Inject } from \"@nestjs/common\";\r\nimport { ClientProxy } from \"@nestjs/microservices\";\r\nimport { FailedTransactionsInvestmentDeletedEvent } from \"./failedTransactionsInvestmentDeleted.event\";\r\nimport { RMQ_INVESTMENT_SERVICE_NAME } from \"../transaction.consts\";\r\n\r\n@EventsHandler(FailedTransactionsInvestmentDeletedEvent)\r\nexport class FailedTransactionsInvestmentDeletedHandler implements IEventHandler<FailedTransactionsInvestmentDeletedEvent>{\r\n\r\n    constructor(\r\n        @Inject(RMQ_INVESTMENT_SERVICE_NAME) private client: ClientProxy\r\n    ) {\r\n        this.client.connect();\r\n    }\r\n    async handle({exception,investmentId}: FailedTransactionsInvestmentDeletedEvent) {\r\n        console.log(`Investment wasn't created. Reason:${JSON.stringify(exception)}`)\r\n        this.client.send(\"fail.investment.creation\",{\r\n            exception,\r\n            investmentId\r\n        })\r\n    }\r\n}","\r\nexport class FailedTransactionsInvestmentDeletedEvent{\r\n    constructor(public readonly exception:unknown,\r\n        public readonly investmentId:string){}\r\n}","export const RMQ_TRANSACTION_SERVICE_NAME = \"TRANSACTION\"\r\nexport const RMQ_INVESTMENT_SERVICE_NAME = \"INVESTMENT\"\r\n","import { EventsHandler, IEventHandler } from \"@nestjs/cqrs\";\r\nimport { InvestmentCreatedEvent } from \"./investmentCreated.event\";\r\nimport { Inject } from \"@nestjs/common\";\r\nimport { Client, ClientProxy, Transport } from \"@nestjs/microservices\";\r\nimport { RMQ_TRANSACTION_SERVICE_NAME } from \"../transaction.consts\";\r\n\r\n@EventsHandler(InvestmentCreatedEvent)\r\nexport class InvestmentCreatedHandler implements IEventHandler<InvestmentCreatedEvent>{\r\n\r\n    \r\n    constructor(\r\n        @Inject(RMQ_TRANSACTION_SERVICE_NAME) private client: ClientProxy\r\n    ) {\r\n        this.client.connect();\r\n    }\r\n\r\n    async handle(event: InvestmentCreatedEvent) {\r\n        console.log(`Investment ${event.dto.investmentId} was created.`);\r\n        this.client.send('investment.created',event.dto).subscribe();\r\n    }\r\n}","module.exports = require(\"joi\");","import { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\n\n@Catch()\nexport class AllExceptionsFilter  implements ExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    console.log(JSON.stringify(exception));\n  }\n}\n","import { CommandHandler, EventBus, EventPublisher, ICommandHandler } from \"@nestjs/cqrs\";\r\nimport { CreateInvestmentCommand } from \"./createInvestment.command\";\r\nimport { InvestmentFactory } from \"../domain/Investment.factory\";\r\nimport { FailedTransactionCreationCommand } from \"./failedTransactionCreation.command\";\r\nimport { FailedTransactionsInvestmentDeletedEvent } from \"../events/failedTransactionsInvestmentDeleted.event\";\r\n\r\n@CommandHandler(FailedTransactionCreationCommand)\r\nexport class FailedTransactionCreationHandler implements ICommandHandler<FailedTransactionCreationCommand> {\r\n  constructor(\r\n    private readonly investmentFactory: InvestmentFactory,\r\n    private readonly eventBus: EventBus\r\n    ) {}\r\n\r\n  async execute({data}: FailedTransactionCreationCommand) {\r\n    const {exception,investmentId} = data;\r\n    await this.investmentFactory.remove(investmentId);\r\n    this.eventBus.publish(new FailedTransactionsInvestmentDeletedEvent(exception,investmentId))\r\n  }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { MicroserviceOptions, Transport } from '@nestjs/microservices';\nimport { InvestmentModule } from './investment/investment.module';\nimport { AllExceptionsFilter } from './filters/exception.filter';\n\nasync function bootstrap() {\n  const app = await NestFactory.createMicroservice<MicroserviceOptions>(InvestmentModule, {\n    transport: Transport.RMQ,\n    options: {\n      urls: ['amqp://localhost:5672'],\n      queue: 'investment',\n      queueOptions: {\n        durable: true,\n        json:true\n      },\n    },\n  });\n  app.useGlobalFilters(new AllExceptionsFilter())\n  await app.listen();\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}